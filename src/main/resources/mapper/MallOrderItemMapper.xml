<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wuli.badminton.dao.MallOrderItemMapper">
    <resultMap id="BaseResultMap" type="com.wuli.badminton.pojo.MallOrderItem">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="order_no" jdbcType="BIGINT" property="orderNo"/>
        <result column="product_id" jdbcType="INTEGER" property="productId"/>
        <result column="product_name" jdbcType="VARCHAR" property="productName"/>
        <result column="product_image" jdbcType="VARCHAR" property="productImage"/>
        <result column="current_unit_price" jdbcType="DECIMAL" property="currentUnitPrice"/>
        <result column="quantity" jdbcType="INTEGER" property="quantity"/>
        <result column="total_price" jdbcType="DECIMAL" property="totalPrice"/>
        <result column="specification_id" jdbcType="INTEGER" property="specificationId"/>
        <result column="specs" jdbcType="VARCHAR" property="specs"/>
        <result column="price_adjustment" jdbcType="DECIMAL" property="priceAdjustment"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    
    <sql id="Base_Column_List">
        id, order_no, product_id, product_name, product_image, current_unit_price, quantity, 
        total_price, specification_id, specs, price_adjustment, create_time, update_time
    </sql>
    
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO mall_order_item (
            order_no, product_id, product_name, product_image, current_unit_price, quantity, 
            total_price, specification_id, specs, price_adjustment, create_time, update_time
        ) VALUES
        <foreach collection="orderItems" item="item" separator=",">
            (#{item.orderNo}, #{item.productId}, #{item.productName}, #{item.productImage}, 
             #{item.currentUnitPrice}, #{item.quantity}, #{item.totalPrice}, #{item.specificationId}, 
             #{item.specs}, #{item.priceAdjustment}, #{item.createTime}, #{item.updateTime})
        </foreach>
    </insert>
    
    <select id="selectByOrderNo" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM mall_order_item
        WHERE order_no = #{orderNo}
        ORDER BY id ASC
    </select>
    
    <delete id="deleteByOrderNo" parameterType="java.lang.Long">
        DELETE FROM mall_order_item WHERE order_no = #{orderNo}
    </delete>
    
    <!-- 推荐算法相关查询 -->
    
    <!-- 获取用户购买过的商品ID列表 -->
    <select id="getUserPurchasedProductIds" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT DISTINCT oi.product_id
        FROM mall_order_item oi
        INNER JOIN mall_order o ON oi.order_no = o.order_no
        WHERE o.user_id = #{userId}
          AND o.status IN (20, 40)
        ORDER BY oi.product_id DESC
    </select>
    
    <!-- 获取购买了指定商品的其他用户ID列表 -->
    <select id="getUsersWhoAlsoBoughtProducts" resultType="java.lang.Long">
        SELECT DISTINCT o.user_id
        FROM mall_order_item oi
        INNER JOIN mall_order o ON oi.order_no = o.order_no
        WHERE oi.product_id IN
        <foreach collection="productIds" item="productId" open="(" separator="," close=")">
            #{productId}
        </foreach>
        AND o.status IN (20, 40)
        AND o.user_id != #{excludeUserId}
    </select>
    
    <!-- 获取相似用户购买的商品统计 -->
    <select id="getSimilarUsersPurchaseStats" resultType="java.util.Map">
        SELECT 
            oi.product_id as productId,
            COUNT(*) as purchaseCount,
            SUM(oi.quantity) as totalQuantity
        FROM mall_order_item oi
        INNER JOIN mall_order o ON oi.order_no = o.order_no
        WHERE o.user_id IN
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND o.status IN (20, 40)
        <if test="excludeProductIds != null and excludeProductIds.size() > 0">
        AND oi.product_id NOT IN
        <foreach collection="excludeProductIds" item="productId" open="(" separator="," close=")">
            #{productId}
        </foreach>
        </if>
        GROUP BY oi.product_id
        ORDER BY purchaseCount DESC, totalQuantity DESC
        LIMIT 20
    </select>
</mapper> 
### 羽毛球场地管理系统 - API测试指南

## 1. 场地状态查询流程

### 1.1 获取场地状态矩阵（可视化展示）
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-25
Accept: application/json

### 1.2 获取指定场地状态
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-25&venueId=1
Accept: application/json

### 1.3 获取周末状态（验证业务规则）
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-28
Accept: application/json

## 2. 场地预约流程

### 2.1 查询可用场地
GET http://localhost:8080/api/venue/availability?date=2024-12-25&startTime=19:00&endTime=20:00
Accept: application/json

### 2.2 带筛选条件查询
GET http://localhost:8080/api/venue/availability?date=2024-12-25&startTime=19:00&endTime=20:00&minPrice=20&maxPrice=40&venueType=1
Accept: application/json

### 2.3 创建预约订单
POST http://localhost:8080/api/reservations/create
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "venueId": 1,
  "reservationDate": "2024-12-25",
  "startTime": "19:00",
  "endTime": "20:00",
  "payType": 1,
  "remark": "测试预约"
}

### 2.4 验证状态变化
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-25&venueId=1
Accept: application/json

## 3. 用户到场管理流程

### 3.1 管理员查看当前预约
GET http://localhost:8080/api/reservations/venue/1?date=2024-12-25
Authorization: Bearer {{admin_token}}

### 3.2 用户到场签到（完成订单）
POST http://localhost:8080/api/reservations/admin/123/complete
Authorization: Bearer {{admin_token}}

### 3.3 验证使用中状态
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-25&venueId=1
Accept: application/json

## 4. 并发控制测试

### 4.1 用户A创建订单
POST http://localhost:8080/api/reservations/create
Content-Type: application/json
Authorization: Bearer {{userA_token}}

{
  "venueId": 1,
  "reservationDate": "2024-12-25",
  "startTime": "20:00",
  "endTime": "21:00",
  "payType": 1,
  "remark": "用户A预约"
}

### 4.2 用户B同时创建订单（应失败）
POST http://localhost:8080/api/reservations/create
Content-Type: application/json
Authorization: Bearer {{userB_token}}

{
  "venueId": 1,
  "reservationDate": "2024-12-25",
  "startTime": "20:00",
  "endTime": "21:00",
  "payType": 1,
  "remark": "用户B预约"
}

## 5. 订单状态变化测试

### 5.1 订单取消释放时段
POST http://localhost:8080/api/reservations/{{orderId}}/cancel
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "reason": "临时有事"
}

### 5.2 验证时段释放
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-25&venueId=1
Accept: application/json

### 5.3 其他用户预约释放的时段
POST http://localhost:8080/api/reservations/create
Content-Type: application/json
Authorization: Bearer {{userC_token}}

{
  "venueId": 1,
  "reservationDate": "2024-12-25",
  "startTime": "20:00",
  "endTime": "21:00",
  "payType": 1,
  "remark": "用户C预约"
}

## 6. 状态映射验证

### 6.1 四种状态对应关系
```
状态1 - 空闲中：绿色，可预约
状态2 - 使用中：橙色，不可预约（教学时间/用户使用中）
状态3 - 已预约：红色，不可预约（待支付/已支付）
状态4 - 维护中：灰色，不可预约（场地维护）
```

### 6.2 订单状态驱动场地状态
```
待支付(1) → 场地状态3（已预约）
已支付(2) → 场地状态3（已预约）
已完成(3) → 场地状态2（使用中）
已取消(4) → 场地状态1（空闲中）
```

## 7. 错误场景测试

### 7.1 无效日期格式
GET http://localhost:8080/api/venue/status-matrix?date=2024/12/25
Accept: application/json

### 7.2 不存在的场地
GET http://localhost:8080/api/venue/status-matrix?date=2024-12-25&venueId=999
Accept: application/json

### 7.3 时间段错误
GET http://localhost:8080/api/venue/availability?date=2024-12-25&startTime=20:00&endTime=19:00
Accept: application/json

## 8. 前端集成建议

### 8.1 页面加载策略
- 初始加载：调用状态矩阵接口
- 用户操作：调用可用性检查接口
- 预约成功：刷新状态矩阵

### 8.2 轮询策略
- 用户活跃时：30秒轮询
- 页面隐藏时：停止轮询
- 页面重新可见：立即刷新

### 8.3 状态颜色映射
```javascript
const STATUS_COLORS = {
  1: '#52c41a', // 空闲中 - 绿色
  2: '#faad14', // 使用中 - 橙色
  3: '#f5222d', // 已预约 - 红色
  4: '#d9d9d9'  // 维护中 - 灰色
};
``` 